{"version":3,"file":"qsui.es.js","sources":["../src/components/shared/host.js","../src/components/b-swatch/index.js","../src/components/knobs/range.js","../src/components/knobs/radio.js","../src/components/shared/form.js","../src/components/c-variant/index.js","../src/components/knobs/checkbox.js","../src/components/ui-variants/index.js","../src/components/knobs/color.js","../src/components/knobs/button.js","../src/components/ui-custom/index.js","../src/components/ui-dataview/index.js","../src/components/ui-mix/index.js","../src/components/ui-scheme/index.js","../src/components/b-font/index.js","../src/components/ui-sysfonts/index.js","../src/components/b-element/index.js","../src/components/knobs/number.js","../src/components/ui-proportion/index.js","../src/components/b-scale/index.js","../src/components/ui-content/index.js","../src/index.js","../src/components/knobs/text.js"],"sourcesContent":["import { html } from 'hybrids';\n\nexport default html`\n  <style>\n    :host {\n      display: block;\n    }\n    :host[hidden] {\n      display: none;\n    }\n  </style>\n`;\n","import { html } from 'hybrids';\nimport { color } from '@quarksuite/core';\n\nimport hostInit from '../shared/host';\n\nexport default {\n  value: '#aaaaaa',\n  render: ({ value }) =>\n    html`\n      ${hostInit}\n      <style>\n        :host {\n          --border-width: var(--ms-inline-4-x);\n          --swatch-padding: var(--ms-block-2-x);\n          --value-font: var(--font-system-mono);\n          --value-padding: calc(var(--swatch-padding) / 2);\n          --value-size: var(--ms-block-base);\n        }\n\n        div {\n          background: ${value};\n          border: var(--border-width) solid;\n          border-color: ${color.palette(value, {\n            shades: { limit: 1, contrast: 24 }\n          })[0].shade};\n          padding: var(--swatch-padding);\n        }\n\n        code {\n          background: rgba(255, 255, 255, 0.8);\n          display: block;\n          font-family: var(--value-font);\n          font-size: var(--value-size);\n          padding: var(--value-padding);\n          text-align: center;\n        }\n      </style>\n      <div>\n        <code>${value}</code>\n      </div>\n    `\n};\n","import { html } from 'hybrids';\n\nexport default (\n  label,\n  value,\n  handler,\n  { min = 0, max = 100, inline = false, desc, suffix = '%' } = {}\n) => {\n  const id = label\n    .toLowerCase()\n    .split(' ')\n    .join('-');\n\n  return inline\n    ? html`\n        <label class=\"range\"\n          ><input\n            type=\"range\"\n            value=\"${value}\"\n            min=\"${min}\"\n            max=\"${max}\"\n            oninput=${handler}\n          />\n          ${label}: ${value}${suffix} <small>${desc}</small></label\n        >\n      `\n    : html`\n        <div class=\"range\">\n          <label for=\"${id}\">${label}: ${value}${suffix}</label>\n          <input\n            id=\"${id}\"\n            type=\"range\"\n            value=\"${value}\"\n            min=\"${min}\"\n            max=\"${max}\"\n            oninput=\"${handler}\"\n          />\n        </div>\n      `;\n};\n","import { html } from 'hybrids';\n\nexport default (name, choices, handler) =>\n  Object.values(choices).map((option, index) => {\n    const { label, value } = option;\n\n    return index === 0\n      ? html`\n          <label class=\"radio\"\n            ><input\n              type=\"radio\"\n              name=\"${name}\"\n              value=\"${value}\"\n              oninput=\"${handler}\"\n              checked\n            />\n            ${label}\n          </label>\n        `\n      : html`\n          <label class=\"radio\"\n            ><input\n              type=\"radio\"\n              name=\"${name}\"\n              value=\"${option.value}\"\n              oninput=\"${handler}\"\n            />\n            ${label}\n          </label>\n        `;\n  });\n","import { html } from 'hybrids';\n\nexport default html`\n  <style>\n    :host {\n      --form-flow: column wrap;\n      --form-font: var(--font-system-sans);\n      --form-margins: 0 0 var(--ms-block-base) 0;\n\n      --field-margins: 0 0 var(--ms-block-base) 0;\n\n      --fieldset-bg: var(--color-primary-tint-300);\n      --fieldset-border-width: var(--ms-inline-base);\n      --fieldset-border-style: solid;\n      --fieldset-border-color: var(--color-primary-base);\n      --fieldset-border: var(--fieldset-border-width)\n        var(--fieldset-border-style) var(--fieldset-border-color);\n\n      --label-font-size: var(--ms-block-base);\n\n      --button-main-bg: var(--color-primary-tint-300);\n      --button-main-border-color: var(--color-secondary-base);\n      --button-main-padding: var(--ms-block-base);\n      --button-main-font-size: var(--ms-block-2-x);\n\n      --button-sub-bg: var(--button-main-bg);\n      --button-sub-border-color: var(--color-tertiary-base);\n      --button-sub-font-size: calc(var(--button-main-font-size) / 2);\n      --button-sub-padding: calc(var(--button-main-padding) / 3);\n    }\n\n    form {\n      display: flex;\n      flex-flow: var(--form-flow);\n      font-family: var(--form-font);\n      margin: var(--form-margins);\n    }\n\n    label,\n    legend {\n      font-weight: 700;\n    }\n\n    fieldset {\n      border: var(--fieldset-border);\n    }\n\n    fieldset > label {\n      font-weight: 400;\n    }\n  </style>\n`;\n","import { html } from 'hybrids';\nimport { color } from '@quarksuite/core';\nimport rangeKnob from '../knobs/range';\nimport radioKnob from '../knobs/radio';\n\nimport hostInit from '../shared/host';\nimport formStyles from '../shared/form';\n\nconst addToLimit = host => ++host.limit;\nconst removeFromLimit = host => {\n  if (host.limit === 1) return;\n  --host.limit;\n};\n\nconst setBlend = (host, event) => (host.mode = event.target.value);\n\nexport default {\n  swatch: '#aaaaaa',\n  type: 'tints',\n  limit: 3,\n  contrast: 95,\n  mode: 'logarithmic',\n  format: 'hex',\n  output: ({ swatch, type, limit, contrast, format, mode }) =>\n    color.palette(swatch, {\n      [type]: { limit, contrast, mode },\n      format\n    }),\n  render: ({ swatch, type, limit, contrast, mode, format, output }) =>\n    html`\n      ${hostInit} ${formStyles}\n      <style>\n        :host {\n          --field-margins: calc(var(--ms-block-base) / 3);\n        }\n\n        b-swatch {\n          --border-width: var(--ms-inline-base);\n          --swatch-padding: var(--ms-block-base);\n          --value-size: calc(var(--ms-block-base) / 1.2);\n        }\n        .range {\n          margin-bottom: var(--field-margins);\n        }\n\n        .category,\n        .palette {\n          display: flex;\n          flex-flow: row wrap;\n        }\n\n        .palette {\n          flex: 64;\n        }\n\n        .variant {\n          flex: 1;\n        }\n\n        .limit-ctrl {\n          background: transparent;\n          border: none;\n          flex-grow: 1;\n          font-size: var(--ms-block-3-x);\n        }\n      </style>\n      <form action=\"\">\n        ${rangeKnob('Contrast', contrast, html.set('contrast'))} ${radioKnob}\n        <fieldset>\n          <legend>Blend Mode</legend>\n          ${radioKnob(\n            'mode',\n            [\n              { label: 'complex', value: 'logarithmic' },\n              { label: 'simple', value: 'linear' }\n            ],\n            setBlend\n          )}\n        </fieldset>\n      </form>\n      ${Object.values(output).map(\n        color => html`\n          <div class=\"category\">\n            <button class=\"limit-ctrl\" onclick=\"${removeFromLimit}\">\n              -\n            </button>\n            <div class=\"palette\">\n              ${color[type.replace(/s$/g, '')].map(\n                s =>\n                  html`\n                    <b-swatch class=\"variant\" value=\"${s}\"></b-swatch>\n                  `\n              )}\n            </div>\n            <button class=\"limit-ctrl\" onclick=\"${addToLimit}\">+</button>\n          </div>\n        `\n      )}\n    `\n};\n","import { html } from 'hybrids';\n\nexport default (name, switches, handler) =>\n  Object.values(switches).map(toggle => {\n    const { label, value } = toggle;\n    return html`\n      <label class=\"checkbox\"\n        ><input\n          type=\"checkbox\"\n          name=\"${name}\"\n          value=\"${value}\"\n          onchange=\"${handler}\"\n        />\n        ${label}</label\n      >\n    `;\n  });\n","import { html } from 'hybrids';\nimport { color } from '@quarksuite/core';\n\nimport BSwatch from '../b-swatch';\nimport CVariant from '../c-variant';\n\nimport hostInit from '../shared/host';\nimport formStyles from '../shared/form';\n\nimport checkboxKnob from '../knobs/checkbox';\n\nconst activateVariant = (host, event) => {\n  if (event.target.value === 'tints') host.tints = event.target.checked;\n  if (event.target.value === 'tones') host.tones = event.target.checked;\n  if (event.target.value === 'shades') host.shades = event.target.checked;\n};\n\nexport default {\n  base: '#348ec9',\n  tints: false,\n  tones: false,\n  shades: false,\n  format: 'hex',\n  render: ({ base, tints, tones, shades, format }) =>\n    html`\n      ${hostInit} ${formStyles}\n      <style>\n        fieldset {\n          display: flex;\n          flex-flow: row wrap;\n        }\n\n        .checkbox {\n          flex-grow: 1;\n          text-align: center;\n        }\n\n        b-swatch {\n          margin-bottom: calc(var(--ms-block-base) / 2);\n        }\n\n        c-variant {\n          flex-grow: 1;\n          flex-basis: 50%;\n          margin-bottom: var(--ms-block-base);\n        }\n\n        .variants {\n          display: flex;\n          flex-flow: row wrap;\n        }\n      </style>\n      <b-swatch class=\"base\" value=\"${base}\"></b-swatch>\n      <form action=\"\">\n        <fieldset>\n          <legend>Variants</legend>\n          ${checkboxKnob(\n            'variants',\n            [\n              { label: 'tints', value: 'tints' },\n              { label: 'tones', value: 'tones' },\n              { label: 'shades', value: 'shades' }\n            ],\n            activateVariant\n          )}\n        </fieldset>\n      </form>\n      <div class=\"variants\">\n        ${tints &&\n          html`\n            <c-variant swatch=\"${base}\" format=\"${format}\"></c-variant>\n          `}\n        ${tones &&\n          html`\n            <c-variant\n              swatch=\"${base}\"\n              type=\"tones\"\n              limit=\"2\"\n              format=${format}\n            ></c-variant>\n          `}\n        ${shades &&\n          html`\n            <c-variant\n              swatch=\"${base}\"\n              type=\"shades\"\n              limit=\"2\"\n              format=\"${format}\"\n            ></c-variant>\n          `}\n      </div>\n    `.define({ BSwatch, CVariant })\n};\n","import { html } from 'hybrids';\nimport { color } from '@quarksuite/core';\n\nexport default (label, value, handler, format = 'hex') => {\n  const id = label\n    .toLowerCase()\n    .split(' ')\n    .join('-');\n  return html`\n    <style>\n      .color > label {\n        display: block;\n        margin-bottom: var(--ms-inline-base);\n      }\n\n      input[type='color'] {\n        background: transparent;\n        border: none;\n        padding: 0;\n        display: block;\n        width: 100%;\n        height: var(--ms-block-7-x);\n      }\n    </style>\n    <div class=\"color\">\n      <label for=\"${id}\">${label}</label>\n      <input\n        id=\"${id}\"\n        name=\"${id}\"\n        type=\"color\"\n        value=\"${color.format(value, 'hex')}\"\n        oninput=\"${handler}\"\n      />\n    </div>\n  `;\n};\n","import { html } from 'hybrids';\n\nexport default (label, handler, value = '', modifier = '') => html`\n  <button\n    class=\"button ${modifier}\"\n    type=\"button\"\n    value=\"${value}\"\n    onclick=\"${handler}\"\n  >\n    ${label}\n  </button>\n`;\n","import { html } from 'hybrids';\nimport { color } from '@quarksuite/core';\n\nimport UIVariants from '../ui-variants';\n\nimport hostInit from '../shared/host';\nimport formStyle from '../shared/form';\n\nimport colorKnob from '../knobs/color';\nimport buttonKnob from '../knobs/button';\n\nconst addSwatch = (host, event) => {\n  event.preventDefault();\n\n  host.palette = [...host.palette, host.currentValue].filter(\n    (value, index, self) => {\n      return self.indexOf(value) === index;\n    }\n  );\n};\n\nconst removeSwatch = (host, event) => {\n  event.preventDefault();\n\n  host.palette = host.palette.filter(swatch => swatch !== event.target.value);\n};\n\nexport default {\n  palette: [],\n  currentValue: '#f00000',\n  output: ({ palette }) => palette,\n  render: ({ palette, currentValue, output }) =>\n    html`\n      ${hostInit} ${formStyle}\n      <style>\n        .color {\n          margin: var(--field-margins);\n        }\n\n        .button {\n          background: var(--button-main-bg);\n          border-radius: 0.25em;\n          border: 4px solid var(--button-main-border-color);\n          font-size: var(--button-main-font-size);\n          padding: var(--button-main-padding);\n        }\n\n        .palette {\n          display: flex;\n          flex-flow: row wrap;\n        }\n\n        .swatch {\n          position: relative;\n          flex: 1;\n        }\n\n        .button.remove {\n          border-radius: 0 0 0 0.5em;\n          position: absolute;\n          right: 0;\n          background: var(--color-primary-tint-300);\n          border: none;\n          font-size: 1em;\n          opacity: 0.8;\n          padding: 0.25em;\n          width: 1.5em;\n        }\n      </style>\n      <form action=\"\">\n        ${colorKnob('Color', currentValue, html.set('currentValue'))}\n        ${buttonKnob('Add to Palette', addSwatch)}\n      </form>\n      <div class=\"palette\">\n        ${output.map(\n          swatch =>\n            html`\n              <div class=\"swatch\">\n                ${buttonKnob('x', removeSwatch, swatch, 'remove')}\n                <ui-variants base=\"${swatch}\"></ui-variants>\n              </div>\n            `\n        )}\n      </div>\n    `.define({ UIVariants })\n};\n","import { html } from 'hybrids';\nimport { color } from '@quarksuite/core';\n\nimport prism from 'prismjs';\n\nimport hostInit from '../shared/host';\n\nexport default {\n  data: {},\n  variable: 'output',\n  filename: 'system.js',\n  output: ({ data, variable }) =>\n    prism.highlight(\n      `const ${variable} = ${JSON.stringify(data, null, 2)};`,\n      prism.languages.javascript,\n      'javascript'\n    ),\n  render: ({ data, variable, filename, output }) =>\n    html`\n      ${hostInit}\n      <style>\n        .filename,\n        .output-code {\n          font-family: var(--font-system-mono);\n          font-size: var(--ms-block-base);\n          margin: 0;\n        }\n\n        .filename {\n          background: var(--color-primary-base);\n          color: var(--color-primary-tint-300);\n          display: inline-block;\n          font-size: var(--ms-block-base);\n          padding: var(--ms-inline-3-x);\n        }\n\n        .output-code {\n          background: var(--color-primary-tint-300);\n          border: var(--ms-inline-base) solid var(--color-primary-base);\n          padding: var(--ms-inline-4-x);\n        }\n\n        /* prism theme */\n        .token.keyword {\n          color: var(--color-primary-base);\n          font-weight: 700;\n        }\n\n        .token.string {\n          color: var(--color-secondary-base);\n        }\n      </style>\n      <div class=\"filename\"><code>${filename}</code></div>\n      <pre class=\"output-code\"><code innerHTML=\"${output}\"></code></pre>\n    `\n};\n","import { html } from 'hybrids';\nimport { color } from '@quarksuite/core';\nimport colorKnob from '../knobs/color';\nimport rangeKnob from '../knobs/range';\n\nimport BSwatch from '../b-swatch';\n\nimport hostInit from '../shared/host';\nimport formStyles from '../shared/form';\n\nexport default {\n  base: 'dodgerblue',\n  blend: 'hotpink',\n  amount: 50,\n  format: 'hex',\n  output: ({ base, blend, amount }) => color.mix(base, blend, amount),\n  render: ({ base, blend, amount, format, output }) =>\n    html`\n      ${hostInit} ${formStyles}\n      <style>\n        :host {\n          --form-flow: row wrap;\n        }\n        form {\n          display: flex;\n          flex-flow: var(--form-flow);\n          justify-content: space-between;\n        }\n\n        .color {\n          margin: var(--field-margins);\n          flex-basis: 49.5%;\n        }\n\n        .range {\n          flex: 1;\n        }\n\n        .range > input {\n          width: 100%;\n        }\n      </style>\n      <form action=\"\">\n        ${colorKnob('Base Color', base, html.set('base'))}\n        ${colorKnob('Blend Target', blend, html.set('blend'))}\n        ${rangeKnob('Blend Amount', amount, html.set('amount'))}\n      </form>\n      <b-swatch value=\"${output}\"></b-swatch>\n    `.define({ BSwatch })\n};\n","import { html } from 'hybrids';\nimport { color } from '@quarksuite/core';\n\nimport colorKnob from '../knobs/color';\nimport rangeKnob from '../knobs/range';\nimport radioKnob from '../knobs/radio';\nimport checkboxKnob from '../knobs/checkbox';\n\nimport hostInit from '../shared/host';\nimport formStyles from '../shared/form';\n\nimport UIVariants from '../ui-variants';\n\nconst setScheme = (host, event) => (host.type = event.target.value);\nconst setFormat = (host, event) => (host.format = event.target.value);\n\nconst toggleAccented = (host, event) => (host.accented = event.target.checked);\n\nexport default {\n  base: '#348ec9',\n  type: 'monochromatic',\n  distance: 30,\n  accented: false,\n  format: 'hex',\n  output: ({ base, type, distance, accented, format }) =>\n    color.palette(base, {\n      scheme: { type, distance, accented },\n      format\n    }),\n  render: ({ base, type, distance, accented, format, output }) =>\n    html`\n      ${hostInit} ${formStyles}\n      <style>\n        form {\n          display: flex;\n          flex-flow: var(--form-flow);\n        }\n\n        @media (min-width: 32em) {\n          form {\n            flex-flow: row wrap;\n          }\n        }\n\n        .color,\n        fieldset {\n          margin: var(--field-margins);\n        }\n\n        @media (min-width: 32em) {\n          .color {\n            flex: 1;\n            margin-right: var(--ms-block-base);\n          }\n\n          .scheme {\n            flex: 3;\n          }\n        }\n\n        .format {\n          flex: 1;\n          flex-basis: 100%;\n          margin-bottom: var(--ms-block-base);\n        }\n\n        .type > .radio {\n          display: inline-block;\n        }\n\n        .format > .radio {\n          display: inline-block;\n        }\n\n        .palette {\n          display: flex;\n          flex-flow: row wrap;\n        }\n\n        ui-variants {\n          flex-grow: 1;\n        }\n\n        .options > label {\n          font-weight: 400;\n        }\n      </style>\n      <form action=\"\">\n        ${colorKnob('Base Color', base, html.set('base'), format)}\n        <div class=\"scheme\">\n          <fieldset class=\"type\">\n            <legend>\n              Scheme Type\n            </legend>\n            ${radioKnob(\n              'scheme-type',\n              [\n                { label: 'mono', value: 'monochromatic' },\n                { label: 'complement', value: 'complementary' },\n                { label: 'analogous', value: 'analogous' },\n                { label: 'split', value: 'split complementary' },\n                { label: 'triadic', value: 'triadic' },\n                { label: 'dual', value: 'dual color' },\n                { label: 'tetradic', value: 'tetradic' }\n              ],\n              setScheme\n            )}\n          </fieldset>\n          <fieldset>\n            <legend>Options</legend>\n            <div class=\"options\">\n              ${rangeKnob('Distance', distance, html.set('distance'), {\n                min: 15,\n                max: 45,\n                inline: true,\n                desc: '(analogous, split, dual)',\n                suffix: '°'\n              })}\n              ${checkboxKnob(\n                'option-accented',\n                [{ label: 'Accented?', value: 'accented' }],\n                toggleAccented\n              )}\n            </div>\n          </fieldset>\n        </div>\n        <fieldset class=\"format\">\n          <legend>Output Format</legend>\n          ${radioKnob(\n            'format',\n            [\n              { label: 'Hex', value: 'hex' },\n              { label: 'RGB', value: 'rgb' },\n              { label: 'HSL', value: 'hsl' }\n            ],\n            setFormat\n          )}\n        </fieldset>\n      </form>\n      <div class=\"palette\">\n        ${Object.values(output).map(\n          (color, i) =>\n            html`\n              <ui-variants\n                base=\"${color.base}\"\n                format=\"${format}\"\n              ></ui-variants>\n            `\n        )}\n      </div>\n    `.define({ UIVariants })\n};\n","import { html } from 'hybrids';\nimport { typography } from '@quarksuite/core';\n\nimport hostInit from '../shared/host';\n\nexport default {\n  id: 'sans',\n  render: ({ id }) => html`\n    ${hostInit}\n    <style>\n      :host {\n        --sample-size: var(--ms-block-2-x);\n      }\n      .stack {\n        font-family: var(--font-system-sans);\n        font-size: var(--ms-block-base);\n      }\n\n      .stack > span {\n        background: var(--color-primary-base);\n        color: var(--color-primary-tint-300);\n        display: block;\n        padding: var(--ms-inline-4-x);\n        font-weight: 700;\n      }\n\n      .stack > span code {\n        color: var(--color-primary-tint-200);\n        font-weight: 400;\n      }\n\n      .stack > div {\n        border: var(--ms-inline-2-x) solid var(--color-primary-base);\n        padding: var(--ms-block-base);\n        font-family: ${typography.system(id)};\n        font-size: var(--sample-size);\n      }\n    </style>\n    <div class=\"stack\">\n      <span\n        >System ${[id[0].toUpperCase(), id.slice(1, id.length)].join('')}:\n        <code>${typography.system(id)}</code></span\n      >\n      <div>The quick brown fox jumps over the lazy dog.</div>\n    </div>\n  `\n};\n","import { html } from 'hybrids';\nimport { typography } from '@quarksuite/core';\nimport checkboxKnob from '../knobs/checkbox';\n\nimport BFont from '../b-font';\n\nimport hostInit from '../shared/host';\nimport formStyles from '../shared/form';\n\nconst activateStack = (host, event) => {\n  if (event.target.value === 'sans') host.sans = event.target.checked;\n  if (event.target.value === 'serif') host.serif = event.target.checked;\n  if (event.target.value === 'monospace') host.monospace = event.target.checked;\n};\n\nexport default {\n  sans: false,\n  serif: false,\n  monospace: false,\n  output: ({ sans, serif, monospace }) => {\n    let collection = {};\n\n    if (sans) collection.sans = typography.system('sans');\n    if (serif) collection.serif = typography.system('serif');\n    if (monospace) collection.monospace = typography.system('monospace');\n\n    return collection;\n  },\n  render: ({ sans, serif, monospace, output }) =>\n    html`\n      ${hostInit} ${formStyles}\n      <style>\n        .system {\n          display: flex;\n          flex-flow: column wrap;\n        }\n\n        .system > b-font {\n          flex: 1;\n          margin-bottom: var(--ms-block-base);\n        }\n\n        @media (min-width: 32em) {\n          b-font {\n            --sample-size: var(--ms-block-3-x);\n          }\n        }\n      </style>\n      <form action=\"\">\n        <fieldset>\n          <legend>Choose Stacks</legend>\n          ${checkboxKnob(\n            'system',\n            [\n              { label: 'sans', value: 'sans' },\n              { label: 'serif', value: 'serif' },\n              { label: 'monospace', value: 'monospace' }\n            ],\n            activateStack\n          )}\n        </fieldset>\n      </form>\n      <div class=\"system\">\n        ${sans &&\n          html`\n            <b-font></b-font>\n          `}\n        ${serif &&\n          html`\n            <b-font id=\"serif\"></b-font>\n          `}\n        ${monospace &&\n          html`\n            <b-font id=\"monospace\"></b-font>\n          `}\n      </div>\n    `.define({ BFont })\n};\n","import { html } from 'hybrids';\n\nimport hostInit from '../shared/host';\n\nexport default {\n  label: 'base',\n  value: '1rem',\n  render: ({ label, value }) =>\n    html`\n      ${hostInit}\n      <style>\n        :host {\n          --color: var(--color-primary-base);\n        }\n\n        .element {\n          display: flex;\n          flex-flow: column nowrap;\n          align-items: center;\n        }\n\n        .element > div {\n          background: var(--color);\n          margin-bottom: var(--ms-inline-base);\n          width: 100%;\n          height: ${value};\n        }\n\n        .element > code {\n          font-size: var(--ms-block-base);\n        }\n      </style>\n      <div class=\"element\">\n        <div></div>\n        <code>${label}: ${value}</code>\n      </div>\n    `\n};\n","import { html } from 'hybrids';\n\nexport default (label, value, handler, { min = 1, step = 0.001 } = {}) => {\n  const id = label\n    .toLowerCase()\n    .split(' ')\n    .join('-');\n\n  return html`\n    <style>\n      .number > label {\n        display: block;\n        margin-bottom: var(--ms-inline-base);\n      }\n      input[type='number'] {\n        background: var(--color-primary-tint-300);\n        border: var(--ms-inline-base) solid var(--color-primary-base);\n        box-sizing: border-box;\n        display: block;\n        padding: 0.75em;\n        width: 100%;\n      }\n    </style>\n    <div class=\"number\">\n      <label for=\"${id}\">${label}</label>\n      <input\n        id=\"${id}\"\n        type=\"number\"\n        value=\"${value || 1}\"\n        min=\"${min}\"\n        step=\"${step}\"\n        oninput=\"${handler}\"\n      />\n    </div>\n  `;\n};\n","import { html } from 'hybrids';\nimport { scale } from '@quarksuite/core';\n\nimport BElement from '../b-element';\n\nimport numberKnob from '../knobs/number';\nimport radioKnob from '../knobs/radio';\n\nimport hostInit from '../shared/host';\nimport formStyles from '../shared/form';\n\nconst setUnit = (host, event) => (host.unit = event.target.value);\n\nexport default {\n  base: 1,\n  ratio: 1.25,\n  limit: 4,\n  unit: 'rem',\n  output: ({ base, ratio, limit, unit }) =>\n    scale.output(scale.create(base, ratio, limit), unit),\n  render: ({ base, ratio, limit, unit, output }) =>\n    html`\n      ${hostInit} ${formStyles}\n      <style>\n        form {\n          display: flex;\n          flex-flow: var(--form-flow);\n          margin: var(--form-margins);\n        }\n\n        @media (min-width: 32em) {\n          form {\n            flex-flow: row wrap;\n          }\n        }\n\n        b-element {\n          margin-bottom: var(--ms-block-2-x);\n        }\n\n        .scale,\n        .unit {\n          flex: 1;\n        }\n\n        .scale {\n          display: flex;\n          flex-flow: row nowrap;\n        }\n\n        .number {\n          margin: var(--field-margins);\n        }\n\n        @media (min-width: 32em) {\n          .scale {\n            margin-right: var(--ms-block-base);\n          }\n\n          .number {\n            flex: 1;\n            margin: 0;\n          }\n        }\n\n        .unit {\n          display: flex;\n          flex-flow: row wrap;\n        }\n\n        .radio {\n          display: block;\n        }\n      </style>\n      <form action=\"\">\n        <div class=\"scale\">\n          ${numberKnob('Base', base, html.set('base'))}\n          ${numberKnob('Ratio', ratio, html.set('ratio'))}\n          ${numberKnob('Limit', limit, html.set('limit'), { step: 1 })}\n        </div>\n        <fieldset class=\"unit\">\n          <legend>Output Unit</legend>\n          ${radioKnob(\n            'output-unit',\n            [\n              { label: 'rem', value: 'rem' },\n              { label: 'em', value: 'em' },\n              { label: 'px', value: 'px' },\n              { label: 'vw', value: 'vw' },\n              { label: 'vh', value: 'vh' },\n              { label: 'vmin', value: 'vmin' },\n              { label: 'vmax', value: 'vmax' }\n            ],\n            setUnit\n          )}\n        </fieldset>\n      </form>\n      ${output.map((v, i) =>\n        i === 0\n          ? html`\n              <b-element value=\"${v}\"></b-element>\n            `\n          : html`\n              <b-element\n                label=\"${[++i, 'x'].join('')}\"\n                value=\"${v}\"\n              ></b-element>\n            `\n      )}\n    `.define({ BElement })\n};\n","import { html } from 'hybrids';\n\nimport hostInit from '../shared/host';\n\nexport default {\n  label: 'base',\n  value: '1rem',\n  content: 'The quick brown fox jumps over the lazy dog.',\n  render: ({ label, value, content }) =>\n    html`\n      ${hostInit}\n      <style>\n        .label {\n          background: var(--color-primary-base);\n          color: var(--color-primary-tint-300);\n          display: inline-block;\n          font-family: var(--font-system-sans);\n          font-size: var(--ms-block-2-x);\n          padding: var(--ms-block-base);\n        }\n\n        .label > code {\n          color: var(--color-primary-tint-200);\n          font-family: var(--font-system-mono);\n        }\n\n        .content {\n          border: 4px solid var(--color-primary-base);\n          background: var(--color-primary-tint-300);\n          padding: var(--ms-block-base);\n          font-family: var(--font-system-serif);\n          font-size: ${value};\n        }\n      </style>\n      <div class=\"value\">\n        <div class=\"label\">${label}: <code>${value}</code></div>\n        <div class=\"content\">${content}</div>\n      </div>\n    `\n};\n","import { html } from 'hybrids';\nimport { scale } from '@quarksuite/core';\n\nimport BScale from '../b-scale';\n\nimport textKnob from '../knobs/text';\nimport numberKnob from '../knobs/number';\nimport radioKnob from '../knobs/radio';\n\nimport hostInit from '../shared/host';\nimport formStyles from '../shared/form';\n\nconst setUnit = (host, event) => (host.unit = event.target.value);\n\nexport default {\n  base: 1,\n  ratio: 1.25,\n  limit: 4,\n  unit: 'rem',\n  content: 'The quick brown fox jumps over the lazy dog.',\n  output: ({ base, ratio, limit, unit }) =>\n    scale.output(scale.create(base, ratio, limit), unit),\n  render: ({ base, ratio, limit, unit, content, output }) =>\n    html`\n      ${hostInit} ${formStyles}\n      <style>\n        form {\n          display: flex;\n          flex-flow: var(--form-flow);\n          margin: var(--form-margins);\n        }\n\n        @media (min-width: 32em) {\n          form {\n            flex-flow: row wrap;\n          }\n        }\n\n        b-scale {\n          margin-bottom: var(--ms-block-2-x);\n        }\n\n        .input {\n          flex-basis: 100%;\n          margin: var(--field-margins);\n        }\n\n        .scale,\n        .unit {\n          flex: 1;\n        }\n\n        .scale {\n          display: flex;\n          flex-flow: row nowrap;\n        }\n\n        .number {\n          margin: var(--field-margins);\n        }\n\n        @media (min-width: 32em) {\n          .scale {\n            margin-right: var(--ms-block-base);\n          }\n\n          .number {\n            flex: 1;\n            margin: 0;\n          }\n        }\n\n        .unit {\n          display: flex;\n          flex-flow: row wrap;\n        }\n\n        .radio {\n          display: block;\n        }\n      </style>\n      <form action=\"\">\n        ${textKnob('Sample Content', content, html.set('content'), {\n          placeholder: 'Enter some sample text'\n        })}\n        <div class=\"scale\">\n          ${numberKnob('Base', base, html.set('base'))}\n          ${numberKnob('Ratio', ratio, html.set('ratio'))}\n          ${numberKnob('Limit', limit, html.set('limit'), { step: 1 })}\n        </div>\n        <fieldset class=\"unit\">\n          <legend>Output Unit</legend>\n          ${radioKnob(\n            'output-unit',\n            [\n              { label: 'rem', value: 'rem' },\n              { label: 'em', value: 'em' },\n              { label: 'px', value: 'px' },\n              { label: 'ch', value: 'ch' },\n              { label: 'ex', value: 'ex' }\n            ],\n            setUnit\n          )}\n        </fieldset>\n      </form>\n      ${output.map((v, i) =>\n        i === 0\n          ? html`\n              <b-scale value=\"${v}\" content=\"${content}\"></b-scale>\n            `\n          : html`\n              <b-scale\n                label=\"${[++i, 'x'].join('')}\"\n                value=\"${v}\"\n                content=\"${content}\"\n              ></b-scale>\n            `\n      )}\n    `.define({ BScale })\n};\n","import '@webcomponents/webcomponentsjs/webcomponents-bundle.js';\nimport { define } from 'hybrids';\n\n// global tokens\nimport '@quarksuite/tokens/dist/tokens.css';\n\nimport * as components from './components';\n\ndefine({ ...components });\n","import { html } from 'hybrids';\n\nexport default (\n  label,\n  value,\n  handler,\n  { placeholder = 'description of input' }\n) => {\n  const id = label\n    .toLowerCase()\n    .split(' ')\n    .join('-');\n\n  return html`\n    <style>\n      .input > label {\n        display: block;\n        margin-bottom: var(--ms-inline-base);\n      }\n      input[type='text'] {\n        background: var(--color-primary-tint-300);\n        border: var(--ms-inline-base) solid var(--color-primary-base);\n        box-sizing: border-box;\n        display: block;\n        padding: 0.5em;\n        width: 100%;\n      }\n    </style>\n    <div class=\"input\">\n      <label for=\"${id}\">${label}</label>\n      <input\n        id=\"${id}\"\n        type=\"text\"\n        placeholder=\"${placeholder}\"\n        value=\"${value || ''}\"\n        oninput=\"${handler}\"\n      />\n    </div>\n  `;\n};\n"],"names":["html","value","render","hostInit","color","palette","shades","limit","contrast","shade","label","handler","id","toLowerCase","split","join","inline","min","max","suffix","desc","name","choices","Object","values","map","option","index","addToLimit","host","removeFromLimit","setBlend","event","mode","target","swatch","type","format","output","formStyles","rangeKnob","set","radioKnob","replace","s","switches","toggle","activateVariant","tints","checked","tones","base","checkboxKnob","define","BSwatch","CVariant","modifier","addSwatch","preventDefault","currentValue","filter","self","indexOf","removeSwatch","formStyle","colorKnob","buttonKnob","UIVariants","data","variable","filename","prism","highlight","JSON","stringify","languages","javascript","blend","amount","mix","setScheme","setFormat","toggleAccented","accented","distance","scheme","i","typography","system","toUpperCase","slice","length","activateStack","sans","serif","monospace","collection","BFont","step","setUnit","unit","ratio","scale","create","numberKnob","v","BElement","content","placeholder","textKnob","BScale"],"mappings":"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"}